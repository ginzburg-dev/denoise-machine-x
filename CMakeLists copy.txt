cmake_minimum_required(VERSION 3.23)

project(DenoiseMachineX VERSION 0.1.0 LANGUAGES CXX CUDA)

# ---- Options
option(BUILD_CUDA "Build CUDA backends" ON)
option(BUILD_TESTING "Build tests" ON)

# ---- C++ setup
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g")

# Output dirs (bin/ lib/)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# ---- CUDA (Ninja-friendly, no VS toolset required)
if(BUILD_CUDA)
  # Find nvcc explicitly (works with Ninja Multi-Config)
  find_program(NVCC_EXECUTABLE
    NAMES nvcc nvcc.exe
    HINTS "$ENV{CUDA_PATH}/bin"
    PATHS
      "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v13.0/bin"
      "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.4/bin"
      "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.3/bin"
  )
  if(NVCC_EXECUTABLE AND EXISTS "${NVCC_EXECUTABLE}")
    set(CMAKE_CUDA_COMPILER "${NVCC_EXECUTABLE}" CACHE FILEPATH "nvcc" FORCE)
    message(STATUS "Using CUDA compiler: ${CMAKE_CUDA_COMPILER}")
    enable_language(CUDA)
    find_package(CUDAToolkit REQUIRED)
    set(CMAKE_CUDA_STANDARD 17)
    set(CMAKE_CUDA_STANDARD_REQUIRED ON)
    set(CMAKE_CUDA_ARCHITECTURES native) # or 75;86;89
    add_compile_definitions(DMX_ENABLE_CUDA=1)
  else()
    message(WARNING "CUDA not configured: nvcc not found. Building CPU-only. "
                    "Set CUDA_PATH or pass -DCMAKE_CUDA_COMPILER=...")
    set(BUILD_CUDA OFF)
    add_compile_definitions(DMX_ENABLE_CUDA=0)
  endif()
else()
  add_compile_definitions(DMX_ENABLE_CUDA=0)
endif()

# ---- Dependencies: prefer config packages; fallback to vendoring
find_package(Imath   CONFIG QUIET)
find_package(OpenEXR CONFIG QUIET)

if(NOT TARGET Imath::Imath OR NOT TARGET OpenEXR::OpenEXR)
  include(FetchContent)

  if(NOT TARGET Imath::Imath)
    message(STATUS "Fetching Imath…")
    FetchContent_Declare(
      imath
      GIT_REPOSITORY https://github.com/AcademySoftwareFoundation/Imath.git
      GIT_TAG        v3.1.11
    )
    set(IMATH_BUILD_TESTS OFF CACHE BOOL "" FORCE)
    set(IMATH_BUILD_TOOLS OFF CACHE BOOL "" FORCE)
    set(IMATH_INSTALL OFF CACHE BOOL "" FORCE)
    FetchContent_MakeAvailable(imath)
    # Let OpenEXR see vendored Imath
    set(Imath_DIR "${imath_BINARY_DIR}/config" CACHE PATH "" FORCE)
  endif()

  if(NOT TARGET OpenEXR::OpenEXR)
    message(STATUS "Fetching OpenEXR…")
    FetchContent_Declare(
      openexr
      GIT_REPOSITORY https://github.com/AcademySoftwareFoundation/openexr.git
      GIT_TAG        v3.2.4
    )
    set(OPENEXR_BUILD_UTILS OFF CACHE BOOL "" FORCE)
    set(OPENEXR_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
    set(OPENEXR_BUILD_TESTS OFF CACHE BOOL "" FORCE)
    set(OPENEXR_INSTALL OFF CACHE BOOL "" FORCE)
    FetchContent_MakeAvailable(openexr)
  endif()
endif()

# Sanity: imported targets must exist now
if(NOT TARGET Imath::Imath)
  message(FATAL_ERROR "Imath::Imath target not available")
endif()
if(NOT TARGET OpenEXR::OpenEXR)
  message(FATAL_ERROR "OpenEXR::OpenEXR target not available")
endif()

# ---- Sources
file(GLOB_RECURSE SRC_CPP CONFIGURE_DEPENDS ${CMAKE_SOURCE_DIR}/src/*.cpp)
set(CLI_MAIN ${CMAKE_SOURCE_DIR}/cli/main.cpp)

if(BUILD_CUDA)
  file(GLOB_RECURSE SRC_CU CONFIGURE_DEPENDS ${CMAKE_SOURCE_DIR}/src/*.cu)
else()
  set(SRC_CU)
endif()

# ---- Executable
add_executable(dmxdenoiser ${SRC_CPP} ${SRC_CU} ${CLI_MAIN})

target_include_directories(dmxdenoiser PUBLIC ${CMAKE_SOURCE_DIR}/include)

target_link_libraries(dmxdenoiser
  PUBLIC
    Imath::Imath
    OpenEXR::OpenEXR
    $<$<BOOL:${BUILD_CUDA}>:CUDA::cudart>
    $<$<BOOL:${BUILD_CUDA}>:CUDA::cuda_driver>
)

if(BUILD_CUDA)
  set_target_properties(dmxdenoiser PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
endif()

# ---- Tests
if(BUILD_TESTING)
  include(CTest)
  include(FetchContent)

  FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG        v1.14.0
  )
  set(BUILD_GMOCK OFF CACHE BOOL "" FORCE)
  set(INSTALL_GTEST OFF CACHE BOOL "" FORCE)
  FetchContent_MakeAvailable(googletest)

  file(GLOB TEST_SOURCES CONFIGURE_DEPENDS ${CMAKE_SOURCE_DIR}/tests/*.cpp)
  foreach(test_src ${TEST_SOURCES})
    get_filename_component(test_name ${test_src} NAME_WE)
    add_executable(${test_name} ${SRC_CPP} ${SRC_CU} ${test_src})
    target_include_directories(${test_name} PRIVATE ${CMAKE_SOURCE_DIR}/include)
    target_link_libraries(${test_name} PRIVATE
      gtest_main
      Imath::Imath
      OpenEXR::OpenEXR
      $<$<BOOL:${BUILD_CUDA}>:CUDA::cudart>
      $<$<BOOL:${BUILD_CUDA}>:CUDA::cuda_driver>
    )
    if(BUILD_CUDA)
      set_target_properties(${test_name} PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
    endif()
    add_test(NAME ${test_name} COMMAND ${test_name})
  endforeach()
endif()
